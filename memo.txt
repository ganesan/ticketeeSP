#Things to do
1)Prepare template css for development
2)Use bootstrap twitter css for development

#Learning Rails
##Create new apps
rails new ticketeeSP
or 
rails new ticketeeSP -T -d mysql


##Add repos to git
git init
git add .
git commit -a -m 'Initial Commit'
git remote add origin git@github.com:ganesan/ticketee.git
git push origin master -u


##Edit Gemfile
source 'http://rubygems.org'

gem 'rails', '3.1.3'
gem 'sqlite3'
# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   '~> 3.1.5'
  gem 'coffee-rails', '~> 3.1.1'
  gem 'uglifier', '>= 1.0.3'
end

gem 'jquery-rails'

group :test, :development do
  gem 'rspec-rails', '~> 2.5'
end

group :test do
  #refer errata
  gem 'cucumber-rails', '1.0.6'
  gem 'capybara'
  gem 'database_cleaner'
end

##Prepare and install gems
bundle install


## --binstubs
bundle install --binstubs

## install cucumber
rails generate cucumber:install
or
r g cucumber:install

## install rspec
r g rspec:install

## Database configuration
edit the file 
config/database.yml
### sqlite3
development:
  adapter:sqlite3
  database:db/development.sqlite3
  pool: 5
  timeout: 5000

### postgresql
development:
  adapter: postgresql
  database: ticketee_development
  username: root
  password: password

### mysql
development:
  adapter: mysql2
  database: ticketee_development
  username: root
  password: password
  encoding: utf8

## Create db
rake db:migrate

--Finish preparation--

#Preparing for development
#First Step
##Create a feature file (features/creating_projects.feature)

Feature: Creating projects
  In order to have projects to assign tickets to 
  As a user
  I want to create them easily
  
  Scenario: Creating a project
    Given I am on the homepage
    When I follow "New Project"
    And I fill in "Name" with "TextMate 2"
    And I press "Create Project"
    Then I should see "Project has been created."


## Run rake cucumber:ok command
  rake cucumber:ok
  or
  rock

## First thing to do 
   delete public/index.html
   rm public/index.html

## Edit path to root at routes.rb
   root :to => "projects#index"

## Create project controller
r g controller projects
or 
rgc projects

## The action 'index' could not be found for ProjectsController ...
Given I am on the homepage
  The action 'index' could not be found for ProjectsController ...

edit the projects controller file app/controllers/projects_controller.rb

def index
end

## Missing template warning
Given I am on the homepage
Missing template projects/index, application/index
  with {:handlers=>[:erb, :builder],
        :formats=>[:html],
        :locale=>[:en, :en]}.
  Searched in:
    * ".../ticketee/app/views"



create a file at view/projects/index.html.erb


#Given I am on the homepage
    When I follow "New Project"
      no link with title, id or text 'New Project' found


## How to create link_to on erb
<%= link_to "New Project", new_project_path %>

## Add routes to config/routes.rb file
resources :projects

## Creating Model
rails g model project name:string


##Preparing Partial Forms
new.html.erb
<h2>New Project</h2>
<%= render 'form' %>


## How to create a form in erb (partial file: _form.html.erb )

<%= form_for(@project) do |f| %>
  <p>
    <%= f.label :name %>
    <%= f.text_field :name %>
  </p>
  <%= f.submit %>
<% end %>


## And I press "Create Project"
      The action 'create' could not be found for ProjectsController (AbstractController::ActionNotFound)

Automatically know that post action will call create methods


## create methods in the controller
def create
  @project = Project.new(params[:project])
  @project.save
  flash[:notice] = "Project has been created."
  redirect_to @project
end

## show method
def show
	@project = Project.find(params[:id])
end

## show the result in show.html.erb
<h2><%= @project.name %></h2>




## show flash notice edit application.html.erb
add 
<% flash.each do |key, value| %>
   <div class='flash' id='<%= key %>'>
     <%= value %>
   </div>
<% end %>

before <%= yield %>


#Validation

##Preparation
Change the Gemfile
gem 'dynamic_form'

##Change the model/project.rb
In the model
  validates :name, :presence => true

## Change the create method for validation
def create
  @project = Project.new(params[:project])
  if @project.save
    flash[:notice] = "Project has been created."
    redirect_to @project
  else
    flash[:alert] = "Project has not been created."
    render :action => "new"
  end
end

## Edit _form.html.erb 
should be changed to 
<%=form_for(@project) do |f| %>
* <%= f.error_messages %>
	<p>
		<%= f.label :name %>
		<%= f.text_field :name %>
	</p>
	<%= f.submit %>
<% end %>


#Viewing List of CRUD (READ)
## feature/viewing_project.feature
Feature: Viewing projects
  In order to assign tickets to a project
  As a user
  I want to be able to see a list of available projects
  I want to be able to navigate from the project list

Scenario: Listing all the projects
  Given there is a project called "TextMate 2"
  And I am on the homepage
  When I follow "TextMate 2"
  Then I should be on the project page for "TextMate 2"

##Using Factory_girl
Add           gem 'factory_girl' 
to Gemfile
group :test do
end
would be good


## How to use Factory_girl
  Project.create(:name => name) is how you create a new instance
This is how
  Factory(:project, :name => name)

##Factory not registered: project (ArgumentError)

## Where to put the factory files
root/factories/


## features/support/factories.rb so that it will load automatically each time 
## Cucumber starts
Dir[Rails.root + "factories/*.rb"].each do |file|
  require file
end

## Creating Link
<%= link_to project.name, project %>

<h2>Projects</h2>
<ul>
	<% @projects.each do |project| %>
	<li><%= link_to project.name, project%></li>
	<% end %>
</ul>

<%= link_to "New Project", new_project_path %>



## Instance not set
You have a nil object when you didn't expect it!
You might have expected an instance of Array.

def index
   @projects = Project.all
end



# Edit 
The edit_project_path method generates the link to the Project object, pointing at the ProjectsController’s edit action. This method is provided to you because of the resources :projects line in config/routes.rb.

<%= link_to "Edit Project", edit_project_path(@project) %>

def edit
  @project = Project.find(params[:id])
end


# Update

def update
@project = Project.find(params[:id])
  if @project.update_attributes(params[:project])
    flash[:notice] = "Project has been updated."
    redirect_to @project
  else
    flash[:alert] = "Project has not been updated."
    render :action => "edit"
  end
end

@project.update_attributes(params[:project])
returns true if updated, false if fails


# Delete
Feature: Deleting Projects
  In order to remove needless projects
  As a project manager
  I want to be able to delete them

Scenario: Deleting a project
  Given there is a project called "TextMate 2"
  And I am on the homepage
  When I follow "TextMate 2"
  And I follow "Delete Project"
  Then I should see "Project has been deleted."
  Then I should not see "TextMate 2"


## Add to show
<%= link_to "Delete Project", @project, :method => :delete,
  :confirm => "Are you sure you want to delete this project?" %>

## destroy methods
def destroy
   @project = Project.find(params[:id])
   @project.destroy
   flash[:notice] = "Project has been deleted."
   redirect_to projects_path
end


## About redirect
  redirect_to projects_path
  will redirect to
  /projects




# How to run in production environment
rake db:migrate RAILS_ENV=production
rake assets:precompile
rails server -e production


Due to asset serving having been turned off automatically in the production environment, assets will need to be precompiled by running rake assets:precompile before launching the server in production. If this is not run, the styles for the application will be missing.


# Looking for a page that is not there
this is done over in rspec 



#Using before filter
before_filter :find_project, :only =>[:show, :edit, :update, :destroy]

private
  def find_project
    @project = Project.find(params[:id])
    rescue ActiveRecord::RecordNotFound
    flash[:alert] = "The project you were looking for count not be found."
    redirect_to projects_path
  end


######################################################
# Nested Resource
# features/creating_tickets.feature
######################################################
Feature: Creating Tickets
In order to create tickets for projects
As a user
I want to be able to select a project and do that
Background:
  Given there is a project called "Internet Explorer"
  And I am on the homepage
  When I follow "Internet Explorer"
  And I follow "New Ticket"
Scenario: Creating a ticket
  When I fill in "Title" with "Non-standards compliance"
  And I fill in "Description" with "My pages are ugly!"
  And I press "Create Ticket"
  Then I should see "Ticket has been created."
Scenario: Creating a ticket without valid attributes fails
  When I press "Create Ticket"
  Then I should see "Ticket has not been created."
  And I should see "Title can't be blank"
And I should see "Description can't be blank"


## @ticket = @project.tickets.build

class TicketsController < ApplicationController
  before_filter :find_project
  
  def new
    @ticket = @project.tickets.build
  end

  # Where does params[:project_id] come from? 
  # It’s made available through the wonders of 
  # Rails’s routing, just as params[:id] was. 
  # It’s called project_id instead of id because 
  # you could (and later will) have a route that you want to pass 
  # through an ID for a ticket as well, 
  # and that would be params[:id]. 
  # Now how about that tickets method on your @project object? 
  # Let’s make sure it doesn’t already exist by running 
  # bin/ cucumber features/creating_tickets.feature:

  private
    def find_project
      @project = Project.find(params[:project_id])
    end
end


Where does params[:project_id] come from? It’s made available through the wonders of Rails’s routing, just as params[:id] was. It’s called project_id instead of id because you could (and later will) have a route that you want to pass through an ID for a ticket as well, and that would be params[:id]. Now how about that tickets method on your @project object? Let’s make sure it doesn’t already exist by running bin/ cucumber features/creating_tickets.feature:





## has_many association

has_many :tickets

this defines the tickets method, and also build methods 
build method is equivalent to new for the Ticket class but  associates the new bject instantly with the @project object by setting a foreign key called project_id automatically.

## Uninitialized constant Project::Ticket (NameError)

rails generate model ticket title:string description:text project:references

the project:references defines an integer column for the tickets table called project_id
in the migration
this column represents the project this ticket links to and is called a foreign key

### to load new schema
rake db:migrate
### to load new schema for the test
rake db:test:prepare

every time you add a foreign ref keys you should also recreate the test db

### Using the form_for

<%= form_for [@project, @ticket] do |f| %>
	<%= f.error_message %>
	<p>
		<%= f.label :title %><br>
		<%= f.text_field :title %><br>
	</p>
	<p>
		<%= f.label :description %><br>
		<%= f.text_area :description %><br>
	</p>
	<%= f.submit %>
<% end %>

form_for is passed an array of object rather than simply 
<%= form_for @ticket do |f| %>

### <%= form_for [@project, @ticket] do |f| %>
indicates to form_for that you want the form to post to the nested route you're using

For the new action this generate a route like /projects/1/tickets and for the edit action it generates a route like /projects/1/tickets/2


## create function
def create
  @ticket = @project.tickets.build(params[:ticket])
  if @ticket.save
    flash[:notice] = "Ticket has been created."
    redirect_to [@project, @ticket]
  else
    flash[:alert] = "Ticket has not been created."
    render :action => "new"
  end
end


inside this action, redirect_to [@project, @ticket] and specify and Array the same array you used in the form_for, containing a Project object and a Ticket object.

rails determine that you want this helper
project_ticket_path(@project, @ticket)

you could specify project_ticket_path in the action but redirect_to [@project, @ticket]
is DRYer.

Find ticket associated to a project
def find_ticket
          @ticket = @project.tickets.find(params[:id])
end



find is yet another association method provided by Rails when you declared that your Project model has_many :tickets. 


### http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html

before_filter :find_ticket, :only => [:show,
                                              :edit,
                                              :update,
                                              :destroy]


<div id='ticket'>
 <h2><%= @ticket.title %></h2>
 <%= simple_format(@ticket.description) %>
</div>



validation
validates :title, :presence => true
validates :description, :presence => true


## Validation of length
validates :description, :presence => true, :length => { :minimun => 10}

go to console 
r console

and in console
> Ticket.create! 

This will give out and error message.

Result:
ActiveRecord::RecordInvalid: Validation failed: Title can't be blank, Description can't be blank, Description is too short (minimum is 10 characters)

The third part is the result of output.

Description can't be blank, Description is too short (minimum is 10 characters)

this must be in the cucumber feature file.


#Viewing Ticket
Function to view ticket individually

Feature: Viewing tickets
In order to view the tickets for a project
As a user
I want to see them on that project's page
Background:
  Given there is a project called "TextMate 2"
  And that project has a ticket:
    | title | description |
    |  Make it shiny! | Gradients! Starbursts! Oh my! |
  And there is a project called "Internet Explorer"
  And that project has a ticket:
    | title                | description   |
    | Standards compliance | Isn’t a joke. |
  And I am on the homepage
  Scenario: Viewing tickets for a given project
    When I follow "TextMate 2"
    Then I should see "Make it shiny!"
    And I should not see "Standards compliance"
    When I follow "Make it shiny!"
    Then I should see "Make it shiny" within "#ticket h2"
    And I should see "Gradients! Starbursts! Oh my!"
￼￼  When I follow "Ticketee"
    And I follow "Internet Explorer"
    Then I should see "Standards compliance"
    And I should not see "Make it shiny!"
    When I follow "Standards compliance"
    Then I should see "Standards compliance" within "#ticket h2"
    And I should see "Isn't a joke."

##The usage of within in cucumber
rather than checking the entire page for content this step checks 
the specific element using CSS

so 
Then I should see "Make it shiny" within "#ticket h2"

the #ticket prefix finds all elements with an IF of ticket that contain an h2 element
with the content you specified.


## working with tables on Cucumber
Given /^that project has a ticket:$/ do |table|
  table.hashes.each do |attributes|
    @project.tickets.create!(attributes)
  end
end

Because you used a table here, Cucumber provides a hashes method for the table object,
which uses the first row in the table as keys and the rest of the rows(as many as you need)
 for the values of hashes stored in an array.


@project haven't been yet is defined, to be able to get @project
@project = Factory(:project, :name => name)
in features/step_definitions/project_steps.rb

Instance variables are available throughout the scenario in Cucumber, so if you define one in one step, you may use it in the following steps. If you run the feature again, you
see that it can’t find the text for the first ticket because you’re not displaying any 
tickets on the show template ye



<div id='ticket'>
  <h2><%= @ticket.title %></h2>
  <%= simple_format(@ticket.description) %>
</div>

<ul id='tickets'>
	<% @project.tickets.each do |ticket| %>
		<li>
			#<%= ticket.id %> - <%= link_to ticket.title, [@project, ticket] %>
		</li>
	<% end %>
</ul>


If you use a @ticket variable in place of the ticket variable in the link_to's second argument, it will be nil. 
You haven;t initialized the @ticket variable at this point,
and uninitialized instance variables are nil by default. If @ticket rather than the correct ticket is passed in here,
the URL generated will be a projects URL, such as /project/1, rather than the correct /project/1/tickets/2.



## dependent => :destroy
has_many :tickets, :dependent => :destroy
any time you call destroy on a Project object Rails iterates through each ticket for this project and calls destroy on them

When you have a large number of tickets destroy will be called for each one and it will be slow.

## dependent => :delete_all

this simply deletes all the tickets using SQL delete like this:
DELETE FROM tickets WHERE project_id = :project_id

## dependent => :nullify

Rather then deleting the tickets this option keeps it around. and insert null to the project id.



## Edit tickets
Feature: Editing tickets
  In order to alter ticket information
  As a user
  I want a form to edit the tickets

Background:
  Given there is a project called "TextMate 2"
  And that project has a ticket:
    | title           | description                   |
    |  Make it shiny! | Gradients! Starbursts! Oh my! |
  Given I am on the homepage
  When I follow "TextMate 2"
  And I follow "Make it shiny!"
  When I follow "Edit Ticket"
   
Scenario: Updating a ticket
  When I fill in "Title" with "Make it really shiny!"
  And I press "Update Ticket"
  Then I should see "Ticket has been updated."
  And I should see "Make it really shiny!" within "#ticket h2"
  But I should not see "Make it shiny!"

Scenario: Updating a ticket with invalid information
  When I fill in "Title" with ""
  And I press "Update Ticket"
  Then I should see "Ticket has not been updated."



## Edit with nesting 
<%= link_to "Edit Ticket", [:edit, @project, @ticket]%>

## <h2>Editing a ticket in <%= @project.name %></h2>
<%= render "form" %>



def edit

end

def update
if @ticket.update_attributes(params[:ticket])
  flash[:notice] = "Ticket has been updated."
  redirect_to [@project, @ticket]
else
  flash[:alert] = "Ticket has not been updated."
  render :action => "edit"
end
end

## @ticket.update_atributes(params[:ticket]) 
is used for updating



# delete ticket

<%= link_to "Delete Ticket", [@project, @ticket], :method => :delete,
                     :confirm => "Are you sure you want to delete this ticket?" %>


def destroy
  @ticket.destroy
  flash[:notice] = "Ticket has been deleted."
  redirect_to @project
end


######################################################
#
# Using Devise
#
######################################################

Add 
gem 'devise', '~> 1.4.3'
to Gemfile (will be used on all part)


rails g devise:install

rails g devise user
This generator generates a model for your user and adds the following line to your config/routes.rb file:
devise_for :users

with this you will get

new_user_session GET    /users/sign_in(.:format)                         {:action=>"new", :controller=>"devise/sessions"}
            user_session POST   /users/sign_in(.:format)                         {:action=>"create", :controller=>"devise/sessions"}
    destroy_user_session DELETE /users/sign_out(.:format)                        {:action=>"destroy", :controller=>"devise/sessions"}
           user_password POST   /users/password(.:format)                        {:action=>"create", :controller=>"devise/passwords"}
       new_user_password GET    /users/password/new(.:format)                    {:action=>"new", :controller=>"devise/passwords"}
      edit_user_password GET    /users/password/edit(.:format)                   {:action=>"edit", :controller=>"devise/passwords"}
                         PUT    /users/password(.:format)                        {:action=>"update", :controller=>"devise/passwords"}
cancel_user_registration GET    /users/cancel(.:format)                          {:action=>"cancel", :controller=>"devise/registrations"}
       user_registration POST   /users(.:format)                                 {:action=>"create", :controller=>"devise/registrations"}
   new_user_registration GET    /users/sign_up(.:format)                         {:action=>"new", :controller=>"devise/registrations"}
  edit_user_registration GET    /users/edit(.:format)                            {:action=>"edit", :controller=>"devise/registrations"}
                         PUT    /users(.:format)                                 {:action=>"update", :controller=>"devise/registrations"}
                         DELETE /users(.:format)                                 {:action=>"destroy", :controller=>"devise/registrations"}




By default, this one simple line adds routes for user registration, signup, editing and confirmation, and password retrieval. The magic for this line comes from inside the User model that was generated, which contains the code from the following listing.

class User < ActiveRecord::Base
  # Include default devise modules. Others available are:
  # :token_authenticatable, :encryptable, :confirmable, :lockable, :timeoutable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable

  # Setup accessible (or protected) attributes for your model
  attr_accessible :email, :password, :password_confirmation, :remember_me
end


## Create the databases (update)
rake db:migrate  && rake db:test:prepare



add this to views/layout/application.html.erb
<nav>
      <%= link_to "Sign up", new_user_registration_path %>
</nav>


##Confirmation link sign-in
With users now able to sign up to your site, you should make sure they’re also able to sign in. When users are created, they should be sent a confirmation email in which they have to click a link to confirm their email address. You don’t want users signing up with fake email addresses! Once confirmed, the user is automatically signed in by Devise.

### First enable the confirmable module on app/models/user.rb

devise call in app/models/user.rb:
devise :database_authenticatable, :registerable,
       :recoverable, :rememberable, :trackable,
       :validatable, :confirmable

### Edit the Gemfiles
add gem 'email_spec' to the :test group

### add the email steps file
rails g email_spec:steps

### require the needed file
create a file at features/support/email.rb and add
# Email Spec helpers
  require 'email_spec'
  require 'email_spec/cucumber'

### Create new feature signin_in.feature

Feature: Signing in
  In order to use the site
  As a user
  I want to be able to sign in
  Scenario: Signing in via confirmation
  Given there are the following users:
    | email             | password |
    | user@ticketee.com | password |
  And "user@ticketee.com" opens the email with subject "Confirmation instructions"
  And they click the first link in the email
  Then I should see "Your account was successfully confirmed" And I should see "Signed in as user@ticketee.com"


### Add new migration
rails g migration add_confirmable_fields_to_users

to add cofirmation_token and cofirmation_sent_at


### add this to the file
class AddConfirmableFieldsToUsers < ActiveRecord::Migration
  def change
    add_column :users, :confirmation_token, :string
    add_column :users, :confirmed_at, :datetime
    add_column :users, :confimation_sent_at, :datetime
  end
end


<nav>
	<% if user_signed_in? %>
	  Signed in as <%= current_user.email %>
	<% else %>
      <%= link_to "Sign up", new_user_registration_path %>
    <% end %>
</nav>

user_signed_in? and current_user methods are provided by Devise


add this to application.html.erb
<%= link_to "Sign in", new_user_session_path %>


Given there are the following users:
| email             | password | unconfirmed |
| user@ticketee.com | password | true        |


edit Let’s alter this step definition in features/ step_definitions/user_steps.rb:

Given /^there are the following users:$/ do |table|
  table.hashes.each do |attributes|
    unconfirmed = attributes.delete("unconfirmed") == "true"
    @user = User.create!(attributes)
    @user.confirm! unless unconfirmed
  end 
end

## Authenticate Users
  before_filter :authenticate_user!, :except => [:index, :show]

This line ensures that users are authenticated before they go to any action in the con- troller that isn’t the index or show, including the new and create actions.

link to the specific user
@ticket = @project.tickets.build(params[:ticket])
change to 
@ticket = @project.tickets.build(params[:ticket].merge!(:user => current_user))

The merge! method here is a Hash and HashWithIndifferentAccess method, which merges the provided keys into the hash and overrides any keys already specified.2 When you run the feature again using bin/cucumber features/creating_tickets .feature, it complains about an unknown attribute in all three scenarios:


The belongs_to method defines methods for accessing the association, as has_many does, except here you retrieve only one record. 



### Adding new migration
rails g migration add_user_id_to_tickets user_id:integer


undefined method `email' for nil:NilClass (ActionView::Template::Error)


## creating_tickets.feature
Change the Background
from
Given there is a project called "TextMate 2"
And that project has a ticket:
  | title           | description                   |
  | Make it shiny! | Gradients! Starbursts! Oh my! |

to 
Given there are the following users:
  | email             | password |
  | user@ticketee.com | password |
And there is a project called "TextMate 2"
And that project has a ticket:
  | title           | description                   |
  |  Make it shiny! | Gradients! Starbursts! Oh my! |




This is how the whole viewing tickets looks like
Feature: Viewing tickets
  In order to view the tickets for a project
  As a user
  I want to see them on that project's page

Background:
  Given there are the following users:
    | email             | password |
    | user@ticketee.com | password |
  And there is a project called "TextMate 2"
  And "user@ticketee.com" has created a ticket for this project:
    | title           | description                   |
    |  Make it shiny! | Gradients! Starbursts! Oh my! |
  And there is a project called "Internet Explorer"
  And "user@ticketee.com" has created a ticket for this project:
    | title                | description   |
    | Standards compliance | Isn’t a joke. |
  And I am on the homepage
  Scenario: Viewing tickets for a given project
    When I follow "TextMate 2"
    Then I should see "Make it shiny!"
    And I should not see "Standards compliance"
    When I follow "Make it shiny!"
    Then I should see "Make it shiny" within "#ticket h2"
    And I should see "Gradients! Starbursts! Oh my!"

    When I follow "Ticketee"
    And I follow "Internet Explorer"
    Then I should see "Standards compliance"
    And I should not see "Make it shiny!"
    When I follow "Standards compliance"
    Then I should see "Standards compliance" within "#ticket h2"
    And I should see "Isn’t a joke."


	Given /^"([^\"]*)" has created a ticket for this project:$/ do |email, table|
	  table.hashes.each do |attributes|
	    attributes = attributes.merge!(:user => User.find_by_email!(email))
	    @project.tickets.create!(attributes)
	  end
	end
	
The merge! method here is a Hash and HashWithIndifferentAccess method, which merges the provided keys into the hash and overrides any keys already specified.
	

### Editing Tickets
	Background:
	          Given there are the following users:
	            | email             | password |
	            | user@ticketee.com | password |
	          And I am signed in as them
	
    Add steps to  user_steps.rb
	
	Given /^I am signed in as them$/ do
	  steps(%Q{
	    Given I am on the homepage
	    When I follow "Sign in"
	    And I fill in "Email" with "#{@user.email}"
	    And I fill in "Password" with "password"
	    And I press "Sign in"
	    Then I should see "Signed in successfully."
	  }) 
	end
	
	
	
	With this you can also edit features/signing_in.feature
	to
	
	Scenario: Signing in via form
	Given there are the following users:
	  | email             | password |
	  | user@ticketee.com | password |
	  And I am signed in as them
	
	
	
	
	
	
	
	
	
	
	












Feature: Viewing tickets
In order to view the tickets for a project
As a user
I want to see them on that project's page

Background:
Given there are the following users:
| email | password |
| user@ticketee.com | password |
And I am signed in as them
Given there is a project called "TextMate 2"
And "user@ticketee.com" can view the "TextMate 2" project
And "user@ticketee.com" has created a ticket for this project:
| title | description |
| Make it shiny! | Gradients! Starbursts! Oh my! |
And there is a project called "Internet Explorer"
And "user@ticketee.com" can view the "Internet Explorer" project
And "user@ticketee.com" has created a ticket for this project:
| title | description |
| Standards compliance | Isn't a joke. |
And I am on the homepage

Scenario: Viewing tickets for a given project
When I follow "TextMate 2"
Then I should see "Make it shiny!"
And I should not see "Standards compliance"
When I follow "Make it shiny!"
Then I should see "Make it shiny" within "#ticket h2"
And I should see "Gradients! Starbursts! Oh my!"

When I follow "Ticketee"
And I follow "Internet Explorer"
Then I should see "Standards compliance"
And I should not see "Make it shiny!"
When I follow "Standards compliance"
Then I should see "Standards compliance" within "#ticket h2"
And I should see "Isn't a joke."



















