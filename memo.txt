#Things to do
1)Prepare template css for development
2)Use bootstrap twitter css for development

#Learning Rails
##Create new apps
rails new ticketeeSP
or 
rails new ticketeeSP -T -d mysql


##Add repos to git
git init
git add .
git commit -a -m 'Initial Commit'
git remote add origin git@github.com:ganesan/ticketee.git
git push origin master -u


##Edit Gemfile
source 'http://rubygems.org'

gem 'rails', '3.1.3'
gem 'sqlite3'
# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   '~> 3.1.5'
  gem 'coffee-rails', '~> 3.1.1'
  gem 'uglifier', '>= 1.0.3'
end

gem 'jquery-rails'

group :test, :development do
  gem 'rspec-rails', '~> 2.5'
end

group :test do
  #refer errata
  gem 'cucumber-rails', '1.0.6'
  gem 'capybara'
  gem 'database_cleaner'
end

##Prepare and install gems
bundle install


## --binstubs
bundle install --binstubs

## install cucumber
rails generate cucumber:install
or
r g cucumber:install

## install rspec
r g rspec:install

## Database configuration
edit the file 
config/database.yml
### sqlite3
development:
  adapter:sqlite3
  database:db/development.sqlite3
  pool: 5
  timeout: 5000

### postgresql
development:
  adapter: postgresql
  database: ticketee_development
  username: root
  password: password

### mysql
development:
  adapter: mysql2
  database: ticketee_development
  username: root
  password: password
  encoding: utf8

## Create db
rake db:migrate

--Finish preparation--

#Preparing for development
#First Step
##Create a feature file (features/creating_projects.feature)

Feature: Creating projects
  In order to have projects to assign tickets to 
  As a user
  I want to create them easily
  
  Scenario: Creating a project
    Given I am on the homepage
    When I follow "New Project"
    And I fill in "Name" with "TextMate 2"
    And I press "Create Project"
    Then I should see "Project has been created."


## Run rake cucumber:ok command
  rake cucumber:ok
  or
  rock

## First thing to do 
   delete public/index.html
   rm public/index.html

## Edit path to root at routes.rb
   root :to => "projects#index"

## Create project controller
r g controller projects
or 
rgc projects

## The action 'index' could not be found for ProjectsController ...
Given I am on the homepage
  The action 'index' could not be found for ProjectsController ...

edit the projects controller file app/controllers/projects_controller.rb

def index
end

## Missing template warning
Given I am on the homepage
Missing template projects/index, application/index
  with {:handlers=>[:erb, :builder],
        :formats=>[:html],
        :locale=>[:en, :en]}.
  Searched in:
    * ".../ticketee/app/views"



create a file at view/projects/index.html.erb


#Given I am on the homepage
    When I follow "New Project"
      no link with title, id or text 'New Project' found


## How to create link_to on erb
<%= link_to "New Project", new_project_path %>

## Add routes to config/routes.rb file
resources :projects

## Creating Model
rails g model project name:string


##Preparing Partial Forms
new.html.erb
<h2>New Project</h2>
<%= render 'form' %>


## How to create a form in erb (partial file: _form.html.erb )

<%= form_for(@project) do |f| %>
  <p>
    <%= f.label :name %>
    <%= f.text_field :name %>
  </p>
  <%= f.submit %>
<% end %>


## And I press "Create Project"
      The action 'create' could not be found for ProjectsController (AbstractController::ActionNotFound)

Automatically know that post action will call create methods


## create methods in the controller
def create
  @project = Project.new(params[:project])
  @project.save
  flash[:notice] = "Project has been created."
  redirect_to @project
end

## show method
def show
	@project = Project.find(params[:id])
end

## show the result in show.html.erb
<h2><%= @project.name %></h2>




## show flash notice edit application.html.erb
add 
<% flash.each do |key, value| %>
   <div class='flash' id='<%= key %>'>
     <%= value %>
   </div>
<% end %>

before <%= yield %>


#Validation

##Preparation
Change the Gemfile
gem 'dynamic_form'

##Change the model/project.rb
In the model
  validates :name, :presence => true

## Change the create method for validation
def create
  @project = Project.new(params[:project])
  if @project.save
    flash[:notice] = "Project has been created."
    redirect_to @project
  else
    flash[:alert] = "Project has not been created."
    render :action => "new"
  end
end

## Edit _form.html.erb 
should be changed to 
<%=form_for(@project) do |f| %>
* <%= f.error_messages %>
	<p>
		<%= f.label :name %>
		<%= f.text_field :name %>
	</p>
	<%= f.submit %>
<% end %>


#Viewing List of CRUD (READ)
## feature/viewing_project.feature
Feature: Viewing projects
  In order to assign tickets to a project
  As a user
  I want to be able to see a list of available projects
  I want to be able to navigate from the project list

Scenario: Listing all the projects
  Given there is a project called "TextMate 2"
  And I am on the homepage
  When I follow "TextMate 2"
  Then I should be on the project page for "TextMate 2"

##Using Factory_girl
Add           gem 'factory_girl' 
to Gemfile
group :test do
end
would be good


## How to use Factory_girl
  Project.create(:name => name) is how you create a new instance
This is how
  Factory(:project, :name => name)

##Factory not registered: project (ArgumentError)

## Where to put the factory files
root/factories/


## features/support/factories.rb so that it will load automatically each time 
## Cucumber starts
Dir[Rails.root + "factories/*.rb"].each do |file|
  require file
end

## Creating Link
<%= link_to project.name, project %>

<h2>Projects</h2>
<ul>
	<% @projects.each do |project| %>
	<li><%= link_to project.name, project%></li>
	<% end %>
</ul>

<%= link_to "New Project", new_project_path %>



## Instance not set
You have a nil object when you didn't expect it!
You might have expected an instance of Array.

def index
   @projects = Project.all
end



# Edit 
The edit_project_path method generates the link to the Project object, pointing at the ProjectsControllerâ€™s edit action. This method is provided to you because of the resources :projects line in config/routes.rb.

<%= link_to "Edit Project", edit_project_path(@project) %>

def edit
  @project = Project.find(params[:id])
end


# Update

def update
@project = Project.find(params[:id])
  if @project.update_attributes(params[:project])
    flash[:notice] = "Project has been updated."
    redirect_to @project
  else
    flash[:alert] = "Project has not been updated."
    render :action => "edit"
  end
end

@project.update_attributes(params[:project])
returns true if updated, false if fails


# Delete
Feature: Deleting Projects
  In order to remove needless projects
  As a project manager
  I want to be able to delete them

Scenario: Deleting a project
  Given there is a project called "TextMate 2"
  And I am on the homepage
  When I follow "TextMate 2"
  And I follow "Delete Project"
  Then I should see "Project has been deleted."
  Then I should not see "TextMate 2"


## Add to show
<%= link_to "Delete Project", @project, :method => :delete,
  :confirm => "Are you sure you want to delete this project?" %>

## destroy methods
def destroy
   @project = Project.find(params[:id])
   @project.destroy
   flash[:notice] = "Project has been deleted."
   redirect_to projects_path
end


## About redirect
  redirect_to projects_path
  will redirect to
  /projects




# How to run in production environment
rake db:migrate RAILS_ENV=production
rake assets:precompile
rails server -e production


Due to asset serving having been turned off automatically in the production environment, assets will need to be precompiled by running rake assets:precompile before launching the server in production. If this is not run, the styles for the application will be missing.


# Looking for a page that is not there
this is done over in rspec 



#Using before filter
before_filter :find_project, :only =>[:show, :edit, :update, :destroy]

private
  def find_project
    @project = Project.find(params[:id])
    rescue ActiveRecord::RecordNotFound
    flash[:alert] = "The project you were looking for count not be found."
    redirect_to projects_path
  end

